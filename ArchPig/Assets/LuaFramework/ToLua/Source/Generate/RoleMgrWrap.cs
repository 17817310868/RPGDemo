//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RoleMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RoleMgr), typeof(System.Object));
		L.RegFunction("GetMainRole", GetMainRole);
		L.RegFunction("GetRoleGuid", GetRoleGuid);
		L.RegFunction("CreateMainRole", CreateMainRole);
		L.RegFunction("GetRole", GetRole);
		L.RegFunction("GetRolePosToUI", GetRolePosToUI);
		L.RegFunction("CreateOtherRole", CreateOtherRole);
		L.RegFunction("CreateAllOtherRoles", CreateAllOtherRoles);
		L.RegFunction("ClearRoles", ClearRoles);
		L.RegFunction("New", _CreateRoleMgr);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("MainRoleId", get_MainRoleId, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateRoleMgr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				RoleMgr obj = new RoleMgr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: RoleMgr.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMainRole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			UnityEngine.GameObject o = obj.GetMainRole();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleGuid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string o = obj.GetRoleGuid(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMainRole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			S2C_MainRoleInfo arg0 = (S2C_MainRoleInfo)ToLua.CheckObject<S2C_MainRoleInfo>(L, 2);
			obj.CreateMainRole(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetRole(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRolePosToUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector2 o = obj.GetRolePosToUI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateOtherRole(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			S2C_OtherRoleInfo arg0 = (S2C_OtherRoleInfo)ToLua.CheckObject<S2C_OtherRoleInfo>(L, 2);
			obj.CreateOtherRole(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateAllOtherRoles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			System.Collections.Generic.List<S2C_OtherRoleInfo> arg0 = (System.Collections.Generic.List<S2C_OtherRoleInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<S2C_OtherRoleInfo>));
			obj.CreateAllOtherRoles(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearRoles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RoleMgr obj = (RoleMgr)ToLua.CheckObject<RoleMgr>(L, 1);
			obj.ClearRoles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, RoleMgr.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainRoleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RoleMgr obj = (RoleMgr)o;
			string ret = obj.MainRoleId;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MainRoleId on a nil value");
		}
	}
}

