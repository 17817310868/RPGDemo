//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_AttributeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Attribute), typeof(System.Object));
		L.RegFunction("GetCustomAttributes", GetCustomAttributes);
		L.RegFunction("IsDefined", IsDefined);
		L.RegFunction("GetCustomAttribute", GetCustomAttribute);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("Match", Match);
		L.RegFunction("IsDefaultAttribute", IsDefaultAttribute);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("TypeId", get_TypeId, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCustomAttributes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.Reflection.MemberInfo>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Reflection.Module>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Reflection.Assembly>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, bool>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, bool>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Module, bool>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Assembly, bool>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type, bool>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type, bool>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute[] o = System.Attribute.GetCustomAttributes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Attribute.GetCustomAttributes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDefined(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool o = System.Attribute.IsDefined(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool o = System.Attribute.IsDefined(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool o = System.Attribute.IsDefined(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool o = System.Attribute.IsDefined(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool o = System.Attribute.IsDefined(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool o = System.Attribute.IsDefined(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type, bool>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool o = System.Attribute.IsDefined(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type, bool>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool o = System.Attribute.IsDefined(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Attribute.IsDefined");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCustomAttribute(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.MemberInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.MemberInfo arg0 = (System.Reflection.MemberInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.ParameterInfo, System.Type, bool>(L, 1))
			{
				System.Reflection.ParameterInfo arg0 = (System.Reflection.ParameterInfo)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Module, System.Type, bool>(L, 1))
			{
				System.Reflection.Module arg0 = (System.Reflection.Module)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Reflection.Assembly, System.Type, bool>(L, 1))
			{
				System.Reflection.Assembly arg0 = (System.Reflection.Assembly)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Attribute o = System.Attribute.GetCustomAttribute(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Attribute.GetCustomAttribute");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Attribute obj = (System.Attribute)ToLua.CheckObject<System.Attribute>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Attribute obj = (System.Attribute)ToLua.CheckObject<System.Attribute>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Match(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Attribute obj = (System.Attribute)ToLua.CheckObject<System.Attribute>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.Match(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDefaultAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Attribute obj = (System.Attribute)ToLua.CheckObject<System.Attribute>(L, 1);
			bool o = obj.IsDefaultAttribute();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TypeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Attribute obj = (System.Attribute)o;
			object ret = obj.TypeId;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TypeId on a nil value");
		}
	}
}

