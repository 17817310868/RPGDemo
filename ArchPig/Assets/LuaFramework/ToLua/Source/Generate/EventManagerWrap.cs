//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EventManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EventManager), typeof(System.Object));
		L.RegFunction("AddListener", AddListener);
		L.RegFunction("RemoveListener", RemoveListener);
		L.RegFunction("ClearEvent", ClearEvent);
		L.RegFunction("EventTrigger", EventTrigger);
		L.RegFunction("New", _CreateEventManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("eventDic", get_eventDic, set_eventDic);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEventManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EventManager obj = new EventManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EventManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Events.UnityAction>(L, 3))
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.ToObject(L, 3);
				obj.AddListener(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Events.UnityAction<string>>(L, 3))
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction<string> arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.ToObject(L, 3);
				obj.AddListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventManager.AddListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.CheckDelegate<UnityEngine.Events.UnityAction>(L, 3);
				obj.RemoveListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventManager.RemoveListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
			obj.ClearEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EventTrigger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.EventTrigger(arg0);
				return 0;
			}
			else if (count == 3)
			{
				EventManager obj = (EventManager)ToLua.CheckObject<EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.EventTrigger(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventManager.EventTrigger");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EventManager obj = (EventManager)o;
			System.Collections.Generic.Dictionary<string,IEventAction> ret = obj.eventDic;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventDic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, EventManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EventManager obj = (EventManager)o;
			System.Collections.Generic.Dictionary<string,IEventAction> arg0 = (System.Collections.Generic.Dictionary<string,IEventAction>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,IEventAction>));
			obj.eventDic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventDic on a nil value");
		}
	}
}

