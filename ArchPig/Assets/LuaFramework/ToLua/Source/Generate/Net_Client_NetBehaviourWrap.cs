//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Net_Client_NetBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Net.Client.NetBehaviour), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddRpc", AddRpc);
		L.RegFunction("RemoveRpc", RemoveRpc);
		L.RegFunction("Send", Send);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRpc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Net.Client.NetBehaviour.AddRpc(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Net.Client.NetClientBase, object>(L, 1))
			{
				Net.Client.NetClientBase arg0 = (Net.Client.NetClientBase)ToLua.ToObject(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				Net.Client.NetBehaviour.AddRpc(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, bool>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				Net.Client.NetBehaviour.AddRpc(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				Net.Client.NetClientBase arg0 = (Net.Client.NetClientBase)ToLua.CheckObject<Net.Client.NetClientBase>(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Net.Client.NetBehaviour.AddRpc(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Client.NetBehaviour.AddRpc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveRpc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Net.Client.NetBehaviour.RemoveRpc(arg0);
				return 0;
			}
			else if (count == 2)
			{
				Net.Client.NetClientBase arg0 = (Net.Client.NetClientBase)ToLua.CheckObject<Net.Client.NetClientBase>(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				Net.Client.NetBehaviour.RemoveRpc(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Client.NetBehaviour.RemoveRpc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				Net.Client.NetBehaviour.Send(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte, byte[]>(L, 1))
			{
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				Net.Client.NetBehaviour.Send(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<byte, string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
				Net.Client.NetBehaviour.Send(arg0, arg1, arg2);
				return 0;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				Net.Client.NetBehaviour.Send(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Client.NetBehaviour.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

